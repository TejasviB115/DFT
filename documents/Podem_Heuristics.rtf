Podem Heuristics (these heuristics just consider possibility, may fail!)
1. Make correct backtrace ASAP
    Descision gate: only one input can control gate output to objective value 
	choose easiest gate input(PI vs other input)
    Imply gate: one input can’t control gate output to objective value
           choose hardest gate input(find whether test exits or not ASAP)

2.Inversion Parity for assignment
   If even inversion parity path, assign same value as objective, otherwise assign opposite value
   Therefore this assignment is most likely to be correct

3. X-path(Observability)
   All gate output of the chosen-path must have X values and it’s called X path
   If more than one X-path to choose, choose shortest X path to PO
   If X path disappear, backtrack

4.Fan/distance
   Controllability of a gate output is determined by using its fanout and controllability of its input   (considering input cone). 
1. Assign each node an intrinsic controllability value, equal to fanout - 1
   icon(node) = fanout - 1
2. For each circuit element whose input node are assigned, reassign controllability of each output node to be 
cont0(node) = icon(node) + sum(all input cont. value)
cont1(node) = cont0(node)
The higher the number, the more difficult it is to control the line

5.COP(Controllability/Observability Program)
COP use a simple probabilistic approach to determine controllability and observability. 
e.g For a gate with a and b as inputs and c as output, cont0, the controllability of logic 0, cont1, the controllability of logic1 and observability ops, are evaluated as follows:
cont0(node) = 1 - cont1(node)
cont1(primary input) = 0.5
obs(primary output) = 1.0
OR: cont0(c) = cont0(a) * cont0(b)
       obs(a) = cont0(b)*obs(c)
AND:cont1(c) = cont1(a) * cont1(b)
       obs(a) = cont1(a)*obs(c)
FANOUT: obs(composite) = 1 - sumproduct(1 - obs(each fanout branch))
